// generated from ada_annex_p.wy -*- buffer-read-only:t -*-
module.exports = grammar({
  name: 'ada',
  rules: {
compilation: $ => choice($.compilation_unit,seq($.compilation, $.compilation_unit)),
AMPERSAND: $ => "&",
AT_SIGN: $ => "@",
BAR: $ => "|",
BOX: $ => "<>",
COLON: $ => ":",
COLON_EQUAL: $ => ":=",
COMMA: $ => ",",
DOT: $ => ".",
DOT_DOT: $ => "..",
EQUAL: $ => "=",
EQUAL_GREATER: $ => "=>",
GREATER: $ => ">",
GREATER_EQUAL: $ => ">=",
GREATER_GREATER: $ => ">>",
LESS: $ => "<",
LESS_EQUAL: $ => "<=",
LESS_LESS: $ => "<<",
MINUS: $ => "-",
PLUS: $ => "+",
SEMICOLON: $ => ";",
SLASH: $ => "/",
SLASH_EQUAL: $ => "/=",
STAR: $ => "*",
STAR_STAR: $ => "**",
tick: $ => "'",
NUMERIC_LITERAL: $ => /([0-9])|([0-9][0-9eE._-]*[0-9])|([0-9]+#[0-9a-fA-F._-]+#)/,
IDENTIFIER: $ => /[$a-zA-Z][Ï€0-9a-zA-Z_]*/,
STRING_LITERAL: $ => /("[\x20-\x21\x23-\x7F]*")+/,
CHARACTER_LITERAL: $ => /'[\x20-\x21\x23-\x7F]'/,
pragma_g: $ => seq('pragma', $.IDENTIFIER, optional(seq('(', $.pragma_argument_association, repeat(seq(',', $.pragma_argument_association)), ')')), ';'),
pragma_argument_association: $ => choice(seq(optional(seq($.IDENTIFIER, '=>')), $.expression),seq($.aspect_mark, '=>', $.expression)),
basic_declaration: $ => choice($.pragma_g,$.type_declaration,$.subtype_declaration,$.object_declaration,$.number_declaration,$.subprogram_declaration,$.abstract_subprogram_declaration,$.null_procedure_declaration,$.expression_function_declaration,$.package_declaration,$.renaming_declaration,$.exception_declaration,$.generic_declaration,$.generic_instantiation),
type_declaration: $ => choice($.full_type_declaration,$.incomplete_type_declaration,$.private_type_declaration,$.private_extension_declaration),
full_type_declaration: $ => choice(seq('type', $.IDENTIFIER, optional($.known_discriminant_part), 'is', $.type_definition, optional($.aspect_specification), ';'),$.task_type_declaration,$.protected_type_declaration),
type_definition: $ => choice($.enumeration_type_definition,$.integer_type_definition,$.real_type_definition,$.array_type_definition,$.record_type_definition,$.access_type_definition,$.derived_type_definition,$.interface_type_definition),
subtype_declaration: $ => seq('subtype', $.IDENTIFIER, 'is', $.subtype_indication, optional($.aspect_specification), ';'),
subtype_indication: $ => seq(optional($.null_exclusion), $.name, optional($.constraint)),
constraint: $ => choice($.scalar_constraint,$.composite_constraint),
scalar_constraint: $ => choice($.range_constraint,$.digits_constraint,$.delta_constraint),
composite_constraint: $ => choice($.index_constraint,$.discriminant_constraint),
object_declaration: $ => choice(seq($.defining_identifier_list, ':', optional('aliased'), optional('constant'), $.subtype_indication, optional(seq(':=', $.expression)), optional($.aspect_specification), ';'),seq($.defining_identifier_list, ':', optional('aliased'), optional('constant'), $.access_definition, optional(seq(':=', $.expression)), optional($.aspect_specification), ';'),seq($.defining_identifier_list, ':', optional('aliased'), optional('constant'), $.array_type_definition, optional(seq(':=', $.expression)), optional($.aspect_specification), ';'),$.single_task_declaration,$.single_protected_declaration),
defining_identifier_list: $ => seq($.IDENTIFIER, repeat(seq(',', $.IDENTIFIER))),
number_declaration: $ => seq($.defining_identifier_list, ':', 'constant', ':=', $.expression, ';'),
derived_type_definition: $ => seq(optional('abstract'), optional('limited'), 'new', $.subtype_indication, optional(seq(optional(seq('and', $.interface_list)), $.record_extension_part))),
range_constraint: $ => seq('range', $.range_g),
range_g: $ => choice($.range_attribute_reference,seq($.simple_expression, '..', $.simple_expression)),
enumeration_literal_list: $ => seq($.enumeration_literal_specification, repeat(seq(',', $.enumeration_literal_specification))),
enumeration_type_definition: $ => seq('(', $.enumeration_literal_list, ')'),
enumeration_literal_specification: $ => choice($.IDENTIFIER,$.CHARACTER_LITERAL),
integer_type_definition: $ => choice($.signed_integer_type_definition,$.modular_type_definition),
signed_integer_type_definition: $ => seq('range', $.simple_expression, '..', $.simple_expression),
modular_type_definition: $ => seq('mod', $.expression),
real_type_definition: $ => choice($.floating_point_definition,$.fixed_point_definition),
floating_point_definition: $ => seq('digits', $.expression, optional($.real_range_specification)),
real_range_specification: $ => seq('range', $.simple_expression, '..', $.simple_expression),
fixed_point_definition: $ => choice($.ordinary_fixed_point_definition,$.decimal_fixed_point_definition),
ordinary_fixed_point_definition: $ => seq('delta', $.expression, $.real_range_specification),
decimal_fixed_point_definition: $ => seq('delta', $.expression, 'digits', $.expression, optional($.real_range_specification)),
digits_constraint: $ => seq('digits', $.simple_expression, optional($.range_constraint)),
array_type_definition: $ => choice($.unconstrained_array_definition,$.constrained_array_definition),
index_subtype_definition_list: $ => seq($.index_subtype_definition, repeat(seq(',', $.index_subtype_definition))),
unconstrained_array_definition: $ => seq('array', '(', $.index_subtype_definition_list, ')', 'of', $.component_definition),
index_subtype_definition: $ => seq($.name, 'range', '<>'),
discrete_subtype_definition_list: $ => seq($.discrete_subtype_definition, repeat(seq(',', $.discrete_subtype_definition))),
constrained_array_definition: $ => seq('array', '(', $.discrete_subtype_definition_list, ')', 'of', $.component_definition),
discrete_subtype_definition: $ => choice($.subtype_indication,$.range_g),
component_definition: $ => choice(seq(optional('aliased'), $.subtype_indication),seq(optional('aliased'), $.access_definition)),
index_constraint: $ => seq('(', $.discrete_range, repeat(seq(',', $.discrete_range)), ')'),
discrete_range: $ => choice($.subtype_indication,$.range_g),
discriminant_part: $ => choice($.unknown_discriminant_part,$.known_discriminant_part),
unknown_discriminant_part: $ => seq('(', '<>', ')'),
discriminant_specification_list: $ => seq($.discriminant_specification, repeat(seq(';', $.discriminant_specification))),
known_discriminant_part: $ => seq('(', $.discriminant_specification_list, ')'),
discriminant_specification: $ => choice(seq($.defining_identifier_list, ':', optional($.null_exclusion), $.name, optional(seq(':=', $.default_expression))),seq($.defining_identifier_list, ':', $.access_definition, optional(seq(':=', $.default_expression)))),
default_expression: $ => $.expression,
discriminant_constraint: $ => seq('(', $.discriminant_association, repeat(seq(',', $.discriminant_association)), ')'),
selector_name_list: $ => seq($.selector_name, repeat(seq('|', $.selector_name))),
discriminant_association: $ => seq(optional(seq($.selector_name_list, '=>')), $.expression),
record_type_definition: $ => seq(optional(seq(optional('abstract'), 'tagged')), optional('limited'), $.record_definition),
record_definition: $ => choice(seq('record', $.component_list, 'end', 'record', optional($.IDENTIFIER)),seq('null', 'record')),
component_list: $ => choice(seq($.component_item, repeat($.component_item)),seq(repeat($.component_item), $.variant_part),seq('null', ';')),
component_item: $ => choice($.component_declaration,$.aspect_clause),
component_declaration: $ => seq($.defining_identifier_list, ':', $.component_definition, optional(seq(':=', $.default_expression)), optional($.aspect_specification), ';'),
variant_part: $ => seq('case', $.direct_name, 'is', $.variant, repeat($.variant), 'end', 'case', ';'),
variant: $ => seq('when', $.discrete_choice_list, '=>', $.component_list),
discrete_choice_list: $ => seq($.discrete_choice, repeat(seq('|', $.discrete_choice))),
discrete_choice: $ => choice($.choice_expression,$.subtype_indication,$.range_g,'others'),
record_extension_part: $ => seq('with', $.record_definition),
abstract_subprogram_declaration: $ => seq(optional($.overriding_indicator), $.subprogram_specification, 'is', 'abstract', optional($.aspect_specification), ';'),
interface_type_definition: $ => seq(optional(choice('limited', 'task', 'protected', 'synchronized')), 'interface', optional(seq('and', $.interface_list))),
interface_list: $ => seq($.name, repeat(seq('and', $.name))),
access_type_definition: $ => choice(seq(optional($.null_exclusion), $.access_to_object_definition),seq(optional($.null_exclusion), $.access_to_subprogram_definition)),
access_to_object_definition: $ => seq('access', optional($.general_access_modifier), $.subtype_indication),
general_access_modifier: $ => choice('all','constant'),
access_to_subprogram_definition: $ => choice(seq('access', optional('protected'), 'procedure', optional($.parameter_profile)),seq('access', optional('protected'), 'function', $.parameter_and_result_profile)),
null_exclusion: $ => seq('not', 'null'),
access_definition: $ => choice(seq(optional($.null_exclusion), 'access', optional('constant'), $.name),seq(optional($.null_exclusion), 'access', optional('protected'), 'procedure', optional($.parameter_profile)),seq(optional($.null_exclusion), 'access', optional('protected'), 'function', $.parameter_and_result_profile)),
incomplete_type_declaration: $ => seq('type', $.IDENTIFIER, optional($.discriminant_part), optional(seq('is', 'tagged')), ';'),
declarative_part: $ => repeat1($.declarative_item),
declarative_item: $ => choice($.basic_declarative_item,$.proper_body,$.body_stub),
basic_declarative_item: $ => choice($.basic_declaration,$.aspect_clause,$.use_clause),
proper_body: $ => choice($.subprogram_body,$.package_body,$.task_body,$.protected_body),
name: $ => choice($.direct_name,$.explicit_dereference,$.slice,$.selected_component,$.attribute_reference,$.type_conversion,$.function_call,$.CHARACTER_LITERAL,$.qualified_expression,$.target_name),
direct_name: $ => choice($.IDENTIFIER,$.STRING_LITERAL),
explicit_dereference: $ => seq($.name, '.', 'all'),
slice: $ => seq($.name, '(', $.discrete_range, ')'),
selected_component: $ => seq($.name, '.', $.selector_name),
selector_name: $ => choice($.IDENTIFIER,$.CHARACTER_LITERAL,$.STRING_LITERAL),
attribute_reference: $ => choice(seq($.name, "'", $.attribute_designator),$.reduction_attribute_reference),
attribute_designator: $ => choice(seq($.IDENTIFIER, optional(seq('(', $.expression, ')'))),'access','delta','digits','mod'),
range_attribute_reference: $ => seq($.name, "'", $.range_attribute_designator),
range_attribute_designator: $ => seq('range', optional(seq('(', $.expression, ')'))),
aggregate: $ => choice($.record_aggregate,$.extension_aggregate,$.array_aggregate,$.delta_aggregate,seq('(', $.conditional_expression, ')'),seq('(', $.quantified_expression, ')')),
record_aggregate: $ => seq('(', $.record_component_association_list, ')'),
record_component_association_list: $ => choice(seq($.record_component_association, repeat(seq(',', $.record_component_association))),seq('null', 'record')),
record_component_association: $ => choice(seq(optional(seq($.component_choice_list, '=>')), $.expression),seq($.component_choice_list, '=>', '<>')),
component_choice_list: $ => choice(seq($.selector_name, repeat(seq('|', $.selector_name))),'others'),
extension_aggregate: $ => seq('(', $.expression, 'with', $.record_component_association_list, ')'),
array_aggregate: $ => choice($.positional_array_aggregate,$.null_array_aggregate,$.named_array_aggregate),
expression_list: $ => seq($.expression, repeat(seq(',', $.expression))),
positional_array_aggregate: $ => choice(seq('(', $.expression, ',', $.expression_list, ')'),seq('(', $.expression_list, ',', 'others', '=>', $.expression, ')'),seq('(', $.expression_list, ',', 'others', '=>', '<>', ')'),seq('[', $.expression_list, optional(seq(',', 'others', '=>', $.expression)), ']'),seq('[', $.expression_list, ',', 'others', '=>', '<>', ']')),
null_array_aggregate: $ => seq('[', ']'),
named_array_aggregate: $ => choice(seq('(', $.array_component_association_list, ')'),seq('[', $.array_component_association_list, ']')),
array_component_association_list: $ => seq($.array_component_association, repeat(seq(',', $.array_component_association))),
array_component_association: $ => choice(seq($.discrete_choice_list, '=>', $.expression),seq($.discrete_choice_list, '=>', '<>'),$.iterated_component_association),
iterated_component_association: $ => choice(seq('for', $.IDENTIFIER, 'in', $.discrete_choice_list, '=>', $.expression),seq('for', $.iterator_specification, '=>', $.expression)),
delta_aggregate: $ => choice($.record_delta_aggregate,$.array_delta_aggregate),
record_delta_aggregate: $ => seq('(', $.expression, 'with', 'delta', $.record_component_association_list, ')'),
array_delta_aggregate: $ => choice(seq('(', $.expression, 'with', 'delta', $.array_component_association_list, ')'),seq('[', $.expression, 'with', 'delta', $.array_component_association_list, ']')),
iterated_element_association: $ => choice(seq('for', $.loop_parameter_specification, optional(seq('use', $.expression)), '=>', $.expression),seq('for', $.iterator_specification, optional(seq('use', $.expression)), '=>', $.expression)),
expression: $ => choice($.relation,seq($.relation, repeat1(seq('and', $.relation))),seq($.relation, repeat1(seq('and', 'then', $.relation))),seq($.relation, repeat1(seq('or', $.relation))),seq($.relation, repeat1(seq('or', 'else', $.relation))),seq($.relation, repeat1(seq('xor', $.relation)))),
choice_expression: $ => choice($.choice_relation,seq($.choice_relation, repeat1(seq('and', $.choice_relation))),seq($.choice_relation, repeat1(seq('or', $.choice_relation))),seq($.choice_relation, repeat1(seq('xor', $.choice_relation))),seq($.choice_relation, repeat1(seq('and', 'then', $.choice_relation))),seq($.choice_relation, repeat1(seq('or', 'else', $.choice_relation)))),
choice_relation: $ => seq($.simple_expression, optional(seq($.relational_operator, $.simple_expression))),
relation: $ => choice($.choice_relation,seq($.simple_expression, optional('not'), 'in', $.membership_choice_list),$.raise_expression),
membership_choice_list: $ => seq($.membership_choice, repeat(seq('|', $.membership_choice))),
membership_choice: $ => choice($.simple_expression,$.range_g),
simple_expression: $ => seq(optional($.unary_adding_operator), $.term, repeat(seq($.binary_adding_operator, $.term))),
term: $ => seq($.factor, repeat(seq($.multiplying_operator, $.factor))),
factor: $ => choice(seq($.primary, optional(seq('**', $.primary))),seq('abs', $.primary),seq('not', $.primary)),
primary: $ => choice($.NUMERIC_LITERAL,'null',$.aggregate,$.name,$.allocator,seq('(', $.expression, ')'),seq('(', $.declare_expression, ')')),
relational_operator: $ => choice('=','/=','<','<=','>','>='),
binary_adding_operator: $ => choice('+','-','&'),
unary_adding_operator: $ => choice('+','-'),
multiplying_operator: $ => choice('*','/','mod','rem'),
conditional_expression: $ => choice($.if_expression,$.case_expression),
elsif_expression_item: $ => seq('elsif', $.condition, 'then', $.expression),
elsif_expression_list: $ => choice($.elsif_expression_item,seq($.elsif_expression_list, $.elsif_expression_item)),
if_expression: $ => seq('if', $.condition, 'then', $.expression, $.elsif_expression_list, optional(seq('else', $.expression))),
condition: $ => $.expression,
case_expression_alternative_list: $ => choice($.case_expression_alternative,seq($.case_expression_alternative_list, ',', $.case_expression_alternative)),
case_expression: $ => seq('case', $.expression, 'is', $.case_expression_alternative_list),
case_expression_alternative: $ => seq('when', $.discrete_choice_list, '=>', $.expression),
quantified_expression: $ => choice(seq('for', $.quantifier, $.loop_parameter_specification, '=>', $.predicate),seq('for', $.quantifier, $.iterator_specification, '=>', $.predicate)),
quantifier: $ => choice('all','some'),
predicate: $ => $.expression,
declare_expression: $ => seq('declare', repeat($.declare_item), 'begin', $.expression),
declare_item: $ => choice($.object_declaration,$.object_renaming_declaration),
reduction_attribute_reference: $ => choice(seq($.value_sequence, "'", $.reduction_attribute_designator),seq($.name, "'", $.reduction_attribute_designator)),
value_sequence: $ => seq('[', optional(seq('parallel', optional(seq('(', $.chunk_specification, ')')))), $.iterated_element_association, ']'),
reduction_attribute_designator: $ => seq($.IDENTIFIER, '(', $.reduction_specification, ')'),
reduction_specification: $ => seq($.name, ',', $.expression),
type_conversion: $ => choice(seq($.name, '(', $.expression, ')'),seq($.name, '(', $.name, ')')),
qualified_expression: $ => choice(seq($.name, "'", '(', $.expression, ')'),seq($.name, "'", $.aggregate)),
allocator: $ => seq('new', optional($.subpool_specification), $.subtype_indication),
subpool_specification: $ => seq('(', $.name, ')'),
sequence_of_statements: $ => seq($.statement, repeat($.statement), repeat($.label)),
sequence_of_statements_opt: $ => $.sequence_of_statements,
statement: $ => choice(seq(repeat($.label), $.simple_statement),seq(repeat($.label), $.compound_statement)),
simple_statement: $ => choice($.null_statement,$.assignment_statement,$.exit_statement,$.goto_statement,$.procedure_call_statement,$.simple_return_statement,$.requeue_statement,$.delay_statement,$.abort_statement,$.raise_statement),
compound_statement: $ => choice($.if_statement,$.case_statement,$.loop_statement,$.block_statement,$.extended_return_statement,$.parallel_block_statement,$.accept_statement,$.select_statement),
null_statement: $ => seq('null', ';'),
label: $ => seq('<<', $.statement_identifier, '>>'),
statement_identifier: $ => $.direct_name,
assignment_statement: $ => seq($.name, ':=', $.expression, ';'),
target_name: $ => '@',
elsif_statement_item: $ => seq('elsif', $.condition, 'then', $.sequence_of_statements),
elsif_statement_list: $ => choice($.elsif_statement_item,seq($.elsif_statement_list, $.elsif_statement_item)),
if_statement: $ => seq('if', $.condition, 'then', $.sequence_of_statements, optional($.elsif_statement_list), optional(seq('else', $.sequence_of_statements)), 'end', 'if', ';'),
case_statement_alternative_list: $ => choice($.case_statement_alternative,seq($.case_statement_alternative_list, $.case_statement_alternative)),
case_statement: $ => seq('case', $.expression, 'is', $.case_statement_alternative_list, 'end', 'case', ';'),
case_statement_alternative: $ => seq('when', $.discrete_choice_list, '=>', $.sequence_of_statements),
loop_statement: $ => seq(optional(seq($.statement_identifier, ':')), optional($.iteration_scheme), 'loop', $.sequence_of_statements, 'end', 'loop', optional($.IDENTIFIER), ';'),
iteration_scheme: $ => choice(seq('while', $.condition),seq('for', $.loop_parameter_specification),seq('for', $.iterator_specification),seq(optional('parallel'), 'for', $.procedural_iterator),seq('parallel', optional(seq('(', $.chunk_specification, ')')), 'for', $.loop_parameter_specification),seq('parallel', optional(seq('(', $.chunk_specification, ')')), 'for', $.iterator_specification)),
chunk_specification: $ => choice($.simple_expression,seq($.IDENTIFIER, 'in', $.discrete_subtype_definition)),
loop_parameter_specification: $ => seq($.IDENTIFIER, 'in', optional('reverse'), $.discrete_subtype_definition, optional($.iterator_filter)),
iterator_filter: $ => seq('when', $.condition),
iterator_specification: $ => choice(seq($.IDENTIFIER, optional(seq(':', $.loop_parameter_subtype_indication)), 'in', optional('reverse'), $.name, optional($.iterator_filter)),seq($.IDENTIFIER, optional(seq(':', $.loop_parameter_subtype_indication)), 'of', optional('reverse'), $.name, optional($.iterator_filter))),
loop_parameter_subtype_indication: $ => choice($.subtype_indication,$.access_definition),
procedural_iterator: $ => seq($.iterator_parameter_specification, 'of', $.iterator_procedure_call, optional($.iterator_filter)),
iterator_parameter_specification: $ => choice($.formal_part,seq('(', $.IDENTIFIER, repeat(seq(',', $.IDENTIFIER)), ')')),
iterator_procedure_call: $ => choice($.name,seq($.name, $.iterator_actual_parameter_part)),
iterator_actual_parameter_part: $ => seq('(', $.iterator_parameter_association, repeat(seq(',', $.iterator_parameter_association)), ')'),
iterator_parameter_association: $ => choice($.parameter_association,$.parameter_association_with_box),
parameter_association_with_box: $ => seq(optional(seq($.selector_name, '=>')), '<>'),
block_statement: $ => seq(optional(seq($.statement_identifier, ':')), optional(seq('declare', optional($.declarative_part))), 'begin', $.handled_sequence_of_statements, 'end', optional($.IDENTIFIER), ';'),
parallel_block_statement: $ => seq('parallel', 'do', $.handled_sequence_of_statements, 'and', $.handled_sequence_of_statements, repeat(seq('and', $.handled_sequence_of_statements)), 'end', 'do', ';'),
exit_statement: $ => seq('exit', optional($.name), optional(seq('when', $.condition)), ';'),
goto_statement: $ => seq('goto', $.name, ';'),
subprogram_declaration: $ => seq(optional($.overriding_indicator), $.subprogram_specification, optional($.aspect_specification), ';'),
subprogram_specification: $ => choice($.procedure_specification,$.function_specification),
procedure_specification: $ => seq('procedure', $.name, optional($.parameter_profile)),
function_specification: $ => seq('function', $.name, $.parameter_and_result_profile),
parameter_profile: $ => $.formal_part,
parameter_and_result_profile: $ => choice(seq(optional($.formal_part), 'return', optional($.null_exclusion), $.name),seq(optional($.formal_part), 'return', $.access_definition)),
formal_part: $ => seq('(', $.parameter_specification, repeat(seq(';', $.parameter_specification)), ')'),
parameter_specification: $ => choice(seq($.defining_identifier_list, ':', optional('aliased'), optional($.mode), optional($.null_exclusion), $.name, optional(seq(':=', $.default_expression))),seq($.defining_identifier_list, ':', $.access_definition, optional(seq(':=', $.default_expression)))),
mode: $ => choice('in',seq('in', 'out'),'out'),
global_aspect_definition: $ => choice('null','unspecified',seq($.global_mode, $.global_designator),seq('(', $.global_aspect_element, repeat(seq(',', $.global_aspect_element)), ')'),$.extended_global_aspect_definition),
global_aspect_element: $ => choice(seq($.global_mode, $.global_set),$.extended_global_aspect_element),
global_mode: $ => choice($.basic_global_mode,$.extended_global_mode),
basic_global_mode: $ => choice('in',seq('in', 'out'),'out'),
global_set: $ => seq($.name, repeat(seq(',', $.name))),
global_designator: $ => choice('all','synchronized',$.name),
subprogram_body: $ => seq(optional($.overriding_indicator), $.subprogram_specification, optional($.aspect_specification), 'is', optional($.declarative_part), 'begin', $.handled_sequence_of_statements, 'end', optional($.name), ';'),
procedure_call_statement: $ => seq($.name, ';'),
function_call: $ => seq($.name, $.actual_parameter_part),
parameter_association_list: $ => seq($.parameter_association, repeat(seq(',', $.parameter_association))),
actual_parameter_part: $ => choice(seq('(', $.parameter_association_list, ')'),seq('(', $.conditional_expression, ')'),seq('(', $.quantified_expression, ')')),
parameter_association: $ => seq(optional(seq($.selector_name, '=>')), $.explicit_actual_parameter),
explicit_actual_parameter: $ => $.expression,
simple_return_statement: $ => seq('return', optional($.expression), ';'),
extended_return_object_declaration: $ => seq($.IDENTIFIER, ':', optional('aliased'), optional('constant'), $.return_subtype_indication, optional(seq(':=', $.expression))),
extended_return_statement: $ => seq('return', $.extended_return_object_declaration, optional(seq('do', $.handled_sequence_of_statements, 'end', 'return')), ';'),
return_subtype_indication: $ => choice($.subtype_indication,$.access_definition),
null_procedure_declaration: $ => seq(optional($.overriding_indicator), $.procedure_specification, 'is', 'null', optional($.aspect_specification), ';'),
expression_function_declaration: $ => choice(seq(optional($.overriding_indicator), $.function_specification, 'is', '(', $.expression, ')', optional($.aspect_specification), ';'),seq(optional($.overriding_indicator), $.function_specification, 'is', $.aggregate, optional($.aspect_specification), ';')),
package_declaration: $ => seq($.package_specification, ';'),
package_specification: $ => seq('package', $.name, optional($.aspect_specification), 'is', repeat($.basic_declarative_item), optional(seq('private', repeat($.basic_declarative_item))), 'end', optional(seq(optional(seq($.name, '.')), $.IDENTIFIER))),
package_body: $ => seq('package', 'body', $.name, optional($.aspect_specification), 'is', optional($.declarative_part), optional(seq('begin', $.handled_sequence_of_statements)), 'end', optional(seq(optional(seq($.name, '.')), $.IDENTIFIER)), ';'),
private_type_declaration: $ => seq('type', $.IDENTIFIER, optional($.discriminant_part), 'is', optional(seq(optional('abstract'), 'tagged')), optional('limited'), 'private', optional($.aspect_specification), ';'),
private_extension_declaration: $ => seq('type', $.IDENTIFIER, optional($.discriminant_part), 'is', optional('abstract'), optional(choice('limited', 'synchronized')), 'new', $.subtype_indication, optional(seq('and', $.interface_list)), 'with', 'private', optional($.aspect_specification), ';'),
overriding_indicator: $ => seq(optional('not'), 'overriding'),
use_clause: $ => choice($.use_package_clause,$.use_type_clause),
use_package_clause: $ => seq('use', $.name, repeat(seq(',', $.name)), ';'),
use_type_clause: $ => seq('use', optional('all'), 'type', $.name, repeat(seq(',', $.name)), ';'),
renaming_declaration: $ => choice($.object_renaming_declaration,$.exception_renaming_declaration,$.package_renaming_declaration,$.subprogram_renaming_declaration,$.generic_renaming_declaration),
object_renaming_declaration: $ => choice(seq($.IDENTIFIER, optional(seq(':', optional($.null_exclusion), $.name)), 'renames', $.name, optional($.aspect_specification), ';'),seq($.IDENTIFIER, ':', $.access_definition, 'renames', $.name, optional($.aspect_specification), ';')),
exception_renaming_declaration: $ => seq($.IDENTIFIER, ':', 'exception', 'renames', $.name, optional($.aspect_specification), ';'),
package_renaming_declaration: $ => seq('package', $.name, 'renames', $.name, optional($.aspect_specification), ';'),
subprogram_renaming_declaration: $ => seq(optional($.overriding_indicator), $.subprogram_specification, 'renames', $.name, optional($.aspect_specification), ';'),
generic_renaming_declaration: $ => choice(seq('generic', 'package', $.name, 'renames', $.name, optional($.aspect_specification), ';'),seq('generic', 'procedure', $.name, 'renames', $.name, optional($.aspect_specification), ';'),seq('generic', 'function', $.name, 'renames', $.name, optional($.aspect_specification), ';')),
task_type_declaration: $ => seq('task', 'type', $.IDENTIFIER, optional($.known_discriminant_part), optional($.aspect_specification), optional(seq('is', optional(seq('new', $.interface_list, 'with')), $.task_definition)), ';'),
single_task_declaration: $ => seq('task', $.IDENTIFIER, optional($.aspect_specification), optional(seq('is', optional(seq('new', $.interface_list, 'with')), $.task_definition)), ';'),
task_definition: $ => seq(repeat($.task_item), optional(seq('private', repeat($.task_item))), 'end', optional($.IDENTIFIER)),
task_item: $ => choice($.entry_declaration,$.aspect_clause),
task_body: $ => seq('task', 'body', $.IDENTIFIER, optional($.aspect_specification), 'is', optional($.declarative_part), 'begin', $.handled_sequence_of_statements, 'end', optional($.IDENTIFIER), ';'),
protected_type_declaration: $ => seq('protected', 'type', $.IDENTIFIER, optional($.known_discriminant_part), optional($.aspect_specification), 'is', optional(seq('new', $.interface_list, 'with')), $.protected_definition, ';'),
single_protected_declaration: $ => seq('protected', $.IDENTIFIER, optional($.aspect_specification), 'is', optional(seq('new', $.interface_list, 'with')), $.protected_definition, ';'),
protected_definition: $ => seq(repeat($.protected_operation_declaration), optional(seq('private', repeat($.protected_element_declaration))), 'end', optional($.IDENTIFIER)),
protected_operation_declaration: $ => choice($.subprogram_declaration,$.entry_declaration,$.aspect_clause),
protected_element_declaration: $ => choice($.protected_operation_declaration,$.component_declaration),
protected_body: $ => seq('protected', 'body', $.IDENTIFIER, optional($.aspect_specification), 'is', repeat($.protected_operation_item), 'end', optional($.IDENTIFIER), ';'),
protected_operation_item: $ => choice($.subprogram_declaration,$.subprogram_body,$.null_procedure_declaration,$.expression_function_declaration,$.entry_body,$.aspect_clause),
entry_declaration: $ => seq(optional($.overriding_indicator), 'entry', $.IDENTIFIER, optional(seq('(', $.discrete_subtype_definition, ')')), optional($.parameter_profile), optional($.aspect_specification), ';'),
accept_statement: $ => seq('accept', $.direct_name, optional(seq('(', $.entry_index, ')')), optional($.parameter_profile), optional(seq('do', $.handled_sequence_of_statements, 'end', optional($.IDENTIFIER))), ';'),
entry_index: $ => $.expression,
entry_body: $ => seq('entry', $.IDENTIFIER, optional($.entry_body_formal_part), optional($.aspect_specification), $.entry_barrier, 'is', optional($.declarative_part), 'begin', $.handled_sequence_of_statements, 'end', optional($.IDENTIFIER), ';'),
entry_body_formal_part: $ => seq(seq('(', $.entry_index_specification, ')'), optional($.parameter_profile)),
entry_barrier: $ => seq('when', $.condition),
entry_index_specification: $ => seq('for', $.IDENTIFIER, 'in', $.discrete_subtype_definition),
requeue_statement: $ => seq('requeue', $.name, optional(seq('with', 'abort')), ';'),
delay_statement: $ => choice($.delay_until_statement,$.delay_relative_statement),
delay_until_statement: $ => seq('delay', 'until', $.expression, ';'),
delay_relative_statement: $ => seq('delay', $.expression, ';'),
select_statement: $ => choice($.selective_accept,$.timed_entry_call,$.conditional_entry_call,$.asynchronous_select),
selective_accept: $ => seq('select', optional($.guard), $.select_alternative, repeat(seq('or', optional($.guard), $.select_alternative)), optional(seq('else', $.sequence_of_statements)), 'end', 'select', ';'),
guard: $ => seq('when', $.condition, '=>'),
select_alternative: $ => choice($.accept_alternative,$.delay_alternative,$.terminate_alternative),
accept_alternative: $ => seq($.accept_statement, optional($.sequence_of_statements_opt)),
delay_alternative: $ => seq($.delay_statement, optional($.sequence_of_statements_opt)),
terminate_alternative: $ => seq('terminate', ';'),
timed_entry_call: $ => seq('select', $.entry_call_alternative, 'or', $.delay_alternative, 'end', 'select', ';'),
entry_call_alternative: $ => seq($.procedure_call_statement, optional($.sequence_of_statements_opt)),
conditional_entry_call: $ => seq('select', $.entry_call_alternative, 'else', $.sequence_of_statements, 'end', 'select', ';'),
asynchronous_select: $ => seq('select', $.triggering_alternative, 'then', 'abort', $.abortable_part, 'end', 'select', ';'),
triggering_alternative: $ => choice(seq($.procedure_call_statement, optional($.sequence_of_statements_opt)),seq($.delay_statement, optional($.sequence_of_statements_opt))),
abortable_part: $ => $.sequence_of_statements,
abort_statement: $ => seq('abort', $.name, repeat(seq(',', $.name)), ';'),
compilation_unit: $ => choice($.with_clause,seq(optional('private'), $.declarative_item),$.statement,$.subunit),
with_clause: $ => choice($.limited_with_clause,$.nonlimited_with_clause),
limited_with_clause: $ => seq('limited', optional('private'), 'with', $.name, repeat(seq(',', $.name)), ';'),
nonlimited_with_clause: $ => seq(optional('private'), 'with', $.name, repeat(seq(',', $.name)), ';'),
body_stub: $ => choice($.subprogram_body_stub,$.package_body_stub,$.task_body_stub,$.protected_body_stub),
subprogram_body_stub: $ => seq(optional($.overriding_indicator), $.subprogram_specification, 'is', 'separate', optional($.aspect_specification), ';'),
package_body_stub: $ => seq('package', 'body', $.IDENTIFIER, 'is', 'separate', optional($.aspect_specification), ';'),
task_body_stub: $ => seq('task', 'body', $.IDENTIFIER, 'is', 'separate', optional($.aspect_specification), ';'),
protected_body_stub: $ => seq('protected', 'body', $.IDENTIFIER, 'is', 'separate', optional($.aspect_specification), ';'),
subunit: $ => seq('separate', '(', $.name, ')', $.proper_body),
exception_declaration: $ => seq($.defining_identifier_list, ':', 'exception', optional($.aspect_specification), ';'),
handled_sequence_of_statements: $ => seq($.sequence_of_statements, optional(seq('exception', $.exception_handler, repeat($.exception_handler)))),
exception_choice_list: $ => seq($.exception_choice, repeat(seq('|', $.exception_choice))),
exception_handler: $ => seq('when', optional(seq($.choice_parameter_specification, ':')), $.exception_choice_list, '=>', $.sequence_of_statements),
choice_parameter_specification: $ => $.IDENTIFIER,
exception_choice: $ => choice($.name,'others'),
raise_statement: $ => choice(seq('raise', ';'),seq('raise', $.name, optional(seq('with', $.expression)), ';')),
raise_expression: $ => seq('raise', $.name, optional(seq('with', $.simple_expression))),
generic_declaration: $ => choice($.generic_subprogram_declaration,$.generic_package_declaration),
generic_subprogram_declaration: $ => seq($.generic_formal_part, $.subprogram_specification, optional($.aspect_specification), ';'),
generic_package_declaration: $ => seq($.generic_formal_part, $.package_specification, ';'),
generic_formal_part: $ => seq('generic', repeat(choice($.generic_formal_parameter_declaration, $.use_clause))),
generic_formal_parameter_declaration: $ => choice($.formal_object_declaration,$.formal_type_declaration,$.formal_subprogram_declaration,$.formal_package_declaration),
generic_instantiation: $ => choice(seq('package', $.name, 'is', 'new', $.name, optional($.generic_actual_part), optional($.aspect_specification), ';'),seq(optional($.overriding_indicator), 'procedure', $.name, 'is', 'new', $.name, optional($.generic_actual_part), optional($.aspect_specification), ';'),seq(optional($.overriding_indicator), 'function', $.name, 'is', 'new', $.name, optional($.generic_actual_part), optional($.aspect_specification), ';')),
generic_actual_part: $ => seq('(', $.generic_association, repeat(seq(',', $.generic_association)), ')'),
generic_association: $ => seq(optional(seq($.selector_name, '=>')), $.explicit_generic_actual_parameter),
explicit_generic_actual_parameter: $ => $.expression,
formal_object_declaration: $ => choice(seq($.defining_identifier_list, ':', optional($.mode), optional($.null_exclusion), $.name, optional(seq(':=', $.default_expression)), optional($.aspect_specification), ';'),seq($.defining_identifier_list, ':', optional($.mode), $.access_definition, optional(seq(':=', $.default_expression)), optional($.aspect_specification), ';')),
formal_type_declaration: $ => choice($.formal_complete_type_declaration,$.formal_incomplete_type_declaration),
formal_complete_type_declaration: $ => seq('type', $.IDENTIFIER, optional($.discriminant_part), 'is', $.formal_type_definition, optional(seq('or', 'use', $.name)), optional($.aspect_specification), ';'),
formal_incomplete_type_declaration: $ => seq('type', $.IDENTIFIER, optional($.discriminant_part), optional(seq('is', 'tagged')), optional(seq('or', 'use', $.name)), ';'),
formal_type_definition: $ => choice($.formal_private_type_definition,$.formal_derived_type_definition,$.formal_discrete_type_definition,$.formal_signed_integer_type_definition,$.formal_modular_type_definition,$.formal_floating_point_definition,$.formal_ordinary_fixed_point_definition,$.formal_decimal_fixed_point_definition,$.formal_array_type_definition,$.formal_access_type_definition,$.formal_interface_type_definition),
formal_private_type_definition: $ => seq(optional(seq(optional('abstract'), 'tagged')), optional('limited'), 'private'),
formal_derived_type_definition: $ => seq(optional('abstract'), optional(choice('limited', 'synchronized')), 'new', $.name, optional(seq(optional(seq('and', $.interface_list)), 'with', 'private'))),
formal_discrete_type_definition: $ => seq('(', '<>', ')'),
formal_signed_integer_type_definition: $ => seq('range', '<>'),
formal_modular_type_definition: $ => seq('mod', '<>'),
formal_floating_point_definition: $ => seq('digits', '<>'),
formal_ordinary_fixed_point_definition: $ => seq('delta', '<>'),
formal_decimal_fixed_point_definition: $ => seq('delta', '<>', 'digits', '<>'),
formal_array_type_definition: $ => $.array_type_definition,
formal_access_type_definition: $ => $.access_type_definition,
formal_interface_type_definition: $ => $.interface_type_definition,
formal_subprogram_declaration: $ => choice($.formal_concrete_subprogram_declaration,$.formal_abstract_subprogram_declaration),
formal_concrete_subprogram_declaration: $ => seq('with', $.subprogram_specification, optional(seq('is', $.subprogram_default)), optional($.aspect_specification), ';'),
formal_abstract_subprogram_declaration: $ => seq('with', $.subprogram_specification, 'is', 'abstract', optional($.subprogram_default), optional($.aspect_specification), ';'),
subprogram_default: $ => choice($.default_name,'<>','null'),
default_name: $ => $.name,
formal_package_declaration: $ => seq('with', 'package', $.IDENTIFIER, 'is', 'new', $.name, optional($.formal_package_actual_part), optional($.aspect_specification), ';'),
formal_package_actual_part: $ => choice(seq('(', optional(seq('others', '=>')), '<>', ')'),$.generic_actual_part,seq('(', $.formal_package_association, repeat(seq(',', $.formal_package_association)), optional(seq(',', 'others', '=>', '<>')), ')')),
formal_package_association: $ => choice($.generic_association,seq($.selector_name, '=>', '<>')),
aspect_clause: $ => choice($.attribute_definition_clause,$.enumeration_representation_clause,$.record_representation_clause,$.at_clause),
aspect_mark_list: $ => seq($.aspect_mark, optional(seq('=>', $.aspect_definition)), repeat(seq(',', $.aspect_mark, optional(seq('=>', $.aspect_definition))))),
aspect_specification: $ => seq('with', $.aspect_mark_list),
aspect_mark: $ => seq($.IDENTIFIER, optional(seq("'", $.IDENTIFIER))),
aspect_definition: $ => choice($.expression,$.global_aspect_definition),
attribute_definition_clause: $ => seq('for', $.name, "'", $.attribute_designator, 'use', $.expression, ';'),
enumeration_representation_clause: $ => seq('for', $.name, 'use', $.enumeration_aggregate, ';'),
enumeration_aggregate: $ => $.array_aggregate,
record_representation_clause: $ => seq('for', $.name, 'use', 'record', optional($.mod_clause), repeat($.component_clause), 'end', 'record', optional($.name), ';'),
component_clause: $ => seq($.name, 'at', $.position, 'range', $.first_bit, '..', $.last_bit, ';'),
position: $ => $.expression,
first_bit: $ => $.simple_expression,
last_bit: $ => $.simple_expression,
extended_global_aspect_definition: $ => choice(seq('use', $.formal_parameter_designator),seq('do', $.dispatching_operation_specifier)),
extended_global_aspect_element: $ => choice(seq('use', $.formal_parameter_set),seq('do', $.dispatching_operation_set)),
extended_global_mode: $ => seq('overriding', $.basic_global_mode),
formal_parameter_designator: $ => choice($.formal_group_designator,$.name),
formal_parameter_set: $ => choice($.formal_group_designator,seq($.name, repeat(seq(',', $.name)))),
formal_group_designator: $ => choice('null','all'),
dispatching_operation_set: $ => seq($.dispatching_operation_specifier, repeat(seq(',', $.dispatching_operation_specifier))),
dispatching_operation_specifier: $ => seq($.name, '(', $.name, ')'),
delta_constraint: $ => seq('delta', $.simple_expression, optional($.range_constraint)),
at_clause: $ => seq('for', $.direct_name, 'use', 'at', $.expression, ';'),
mod_clause: $ => seq('at', 'mod', $.expression, ';'),
comment: $ => token(/--.*/),
  },
  conflicts: $ => [
    [$.defining_identifier_list, $.direct_name, ],
    [$.direct_name, $.selector_name, ],
    [$.direct_name, $.selector_name, ],
    [$.discrete_choice, $.component_choice_list, ],
    [$.discrete_subtype_definition, $.discrete_choice, ],
    [$.discriminant_association, $.explicit_actual_parameter, ],
    [$.explicit_actual_parameter, $.explicit_generic_actual_parameter, ],
    [$.explicit_actual_parameter, $.explicit_generic_actual_parameter, ],
    [$.iterated_component_association, $.iterated_element_association, ],
    [$.iterator_parameter_association, $.parameter_association_list, ],
    [$.iterator_parameter_association, $.parameter_association_list, ],
    [$.name, $.selector_name, ],
    [$.name, $.selector_name, ],
    [$.primary, $.global_aspect_definition, ],
    [$.primary, $.global_aspect_definition, ],
    [$.primary, $.global_aspect_definition, ],
    [$.primary, $.global_aspect_definition, ],
    [$.subtype_indication, $.iterator_specification, ],
    [$.subtype_indication, $.iterator_specification, ],
    [$.subtype_indication, $.iterator_specification, ],
    [$.subtype_indication, $.primary, ],
    [$.subtype_indication, $.primary, ],
    [$.subtype_indication, $.primary, ],
    [$.subtype_indication, $.primary, $.iterator_specification, ],
    [$.at_clause, $.name, ],
    [$.attribute_definition_clause, $.attribute_reference, ],
    [$.attribute_designator, $.attribute_designator, ],
    [$.binary_adding_operator, $.simple_expression, ],
    [$.binary_adding_operator, $.simple_expression, ],
    [$.binary_adding_operator, $.simple_expression, ],
    [$.digits_constraint, $.subtype_indication, ],
    [$.dispatching_operation_set, $.extended_global_aspect_element, ],
    [$.expression_function_declaration, $.record_component_association, ],
    [$.expression_function_declaration, $.subprogram_specification, ],
    [$.factor, $.factor, ],
    [$.formal_derived_type_definition, $.formal_derived_type_definition, ],
    [$.full_type_declaration, $.discriminant_part, ],
    [$.generic_instantiation, $.parameter_profile, ],
    [$.generic_renaming_declaration, $.generic_formal_part, ],
    [$.generic_renaming_declaration, $.generic_formal_part, ],
    [$.generic_renaming_declaration, $.generic_formal_part, ],
    [$.global_set, $.formal_parameter_set, ],
    [$.global_set, $.global_aspect_element, ],
    [$.iterator_filter, $.subtype_indication, ],
    [$.null_exclusion, $.mode, ],
    [$.null_procedure_declaration, $.subprogram_specification, ],
    [$.object_renaming_declaration, $.defining_identifier_list, ],
    [$.object_renaming_declaration, $.defining_identifier_list, $.direct_name, ],
    [$.package_body_stub, $.direct_name, ],
    [$.parameter_association, $.selector_name_list, ],
    [$.positional_array_aggregate, $.expression_list, ],
    [$.positional_array_aggregate, $.record_component_association, $.expression_list, ],
    [$.pragma_argument_association, $.aspect_mark, ],
    [$.primary, $.record_component_association, ],
    [$.qualified_expression, $.record_component_association, ],
    [$.raise_expression, $.raise_expression, ],
    [$.range_constraint, $.delta_constraint, ],
    [$.range_constraint, $.digits_constraint, ],
    [$.range_constraint, $.subtype_indication, ],
    [$.record_extension_part, $.derived_type_definition, ],
    [$.tick, $.direct_name, ],
    [$.tick, $.direct_name, ],
    [$.type_conversion, $.discriminant_association, $.explicit_actual_parameter, ],
    [$.type_conversion, $.explicit_actual_parameter, ],
    [$.type_conversion, $.explicit_actual_parameter, $.explicit_generic_actual_parameter, ],
    [$.type_conversion, $.subtype_indication, $.primary, ],
    [$.defining_identifier_list, $.direct_name, $.object_renaming_declaration, $.exception_renaming_declaration, ],
    [$.defining_identifier_list, $.object_renaming_declaration, $.exception_renaming_declaration, ],
    [$.procedure_specification, $.generic_instantiation, ],
    [$.choice_expression, $.relation, ],
    [$.expression_list, ],
    [$.attribute_designator, $.reduction_attribute_designator, ],
    [$.direct_name, $.aspect_mark, ],
    [$.derived_type_definition, $.private_extension_declaration, ],
    [$.component_list, ],
    [$.simple_expression, ],
    [$.term, ],
    [$.subtype_indication, ],
    [$.derived_type_definition, ],
    [$.index_constraint, $.slice, ],
    [$.formal_parameter_set, ],
    [$.dispatching_operation_set, ],
    [$.global_set, ],
    [$.digits_constraint, ],
    [$.delta_constraint, ],
    [$.subtype_indication, $.primary, $.type_conversion, $.dispatching_operation_specifier, ],
    [$.generic_actual_part, $.formal_package_association, ],
  ],
  extras: $ => [
    /\s+/,
    $.comment,
  ],
  });
